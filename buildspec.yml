version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.x
    commands:
      - pip install --upgrade pip setuptools wheel
      - pip install awscli
      - pip install pytest pytest-cov pytest-html junitparser openpyxl

  pre_build:
    commands:
      - echo Logging in to Docker Hub...
      - echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
      - echo Setting image tags...
      - export IMAGE_TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)-${CODEBUILD_BUILD_NUMBER}"
      - export IMAGE_REPO_NAME="$DOCKERHUB_USERNAME/fastapi-sample"
      - echo Installing dependencies...
      - python -m venv .venv
      - |
        if [ -f .venv/bin/activate ]; then
          source .venv/bin/activate
        elif [ -f .venv/Scripts/activate ]; then
          source .venv/Scripts/activate
        fi
      - if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - mkdir -p test-results
      - echo Running pytest with reports...
      - |
        pytest --junitxml=test-results/pytest-report.xml \
               --html=test-results/pytest-report.html --self-contained-html \
               --cov=app --cov-report=xml:test-results/coverage.xml \
               --cov-report=html:test-results/coverage-html \
               --cov-fail-under=80 || exit 1
      - echo Generating Excel report...
      - |
        cat > xml_to_excel.py << 'EOF'
        from junitparser import JUnitXml
        import openpyxl

        xml = JUnitXml.fromfile("test-results/pytest-report.xml")

        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "Test Results"
        ws.append(["Test Case", "Status", "Message"])

        for suite in xml:
            for case in suite:
                name = case.name
                if case.result:
                    status = type(case.result[0]).__name__
                    message = case.result[0].message or ""
                else:
                    status = "Passed"
                    message = ""
                ws.append([name, status, message])

        total = len(list(xml.itercases()))
        passed = len([c for c in xml.itercases() if not c.result])
        failed = len([c for c in xml.itercases() if c.result])

        ws.append([])
        ws.append(["Total", total])
        ws.append(["Passed", passed])
        ws.append(["Failed", failed])

        wb.save("test-results/pytest-report.xlsx")
        print("Excel report saved: test-results/pytest-report.xlsx")
        EOF
      - python xml_to_excel.py

  build:
    commands:
      - echo Building the Docker image...
      - docker build -t "$IMAGE_REPO_NAME:$IMAGE_TAG" .

  post_build:
    commands:
      - echo Pushing Docker image to Docker Hub...
      - docker push "$IMAGE_REPO_NAME:$IMAGE_TAG"
      - echo Writing image definitions file...
      - printf '{"ImageURI":"%s"}' "$IMAGE_REPO_NAME:$IMAGE_TAG" > image_definitions.json

      - |
        if [ -z "${S3_BUCKET}" ]; then
          echo "S3_BUCKET is not set. Please set it in the CodeBuild project environment."
          exit 1
        fi

      - echo Uploading reports to S3...
      - aws s3 cp "test-results/pytest-report.xml" "s3://${S3_BUCKET}/${CODEBUILD_SOURCE_VERSION}/${CODEBUILD_BUILD_ID}/pytest/pytest-report.xml" --content-type "application/xml"
      - aws s3 cp "test-results/pytest-report.html" "s3://${S3_BUCKET}/${CODEBUILD_SOURCE_VERSION}/${CODEBUILD_BUILD_ID}/pytest/pytest-report.html" --content-type "text/html"
      - aws s3 cp "test-results/pytest-report.xlsx" "s3://${S3_BUCKET}/${CODEBUILD_SOURCE_VERSION}/${CODEBUILD_BUILD_ID}/pytest/pytest-report.xlsx" --content-type "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
      - aws s3 cp "test-results/coverage.xml" "s3://${S3_BUCKET}/${CODEBUILD_SOURCE_VERSION}/${CODEBUILD_BUILD_ID}/pytest/coverage.xml" --content-type "application/xml"
      - aws s3 sync "test-results/coverage-html/" "s3://${S3_BUCKET}/${CODEBUILD_SOURCE_VERSION}/${CODEBUILD_BUILD_ID}/pytest/coverage-html/"

artifacts:
  files:
    - image_definitions.json
    - test-results/*
    - test-results/coverage-html/**
  discard-paths: no

reports:
  pytest-reports:
    files:
      - test-results/pytest-report.xml
    file-format: JUNITXML
